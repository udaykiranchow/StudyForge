/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserAuth as PrismaUserAuth } from "@prisma/client";

export class UserAuthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserAuthCountArgs, "select">): Promise<number> {
    return this.prisma.userAuth.count(args);
  }

  async userAuths(
    args: Prisma.UserAuthFindManyArgs
  ): Promise<PrismaUserAuth[]> {
    return this.prisma.userAuth.findMany(args);
  }
  async userAuth(
    args: Prisma.UserAuthFindUniqueArgs
  ): Promise<PrismaUserAuth | null> {
    return this.prisma.userAuth.findUnique(args);
  }
  async createUserAuth(
    args: Prisma.UserAuthCreateArgs
  ): Promise<PrismaUserAuth> {
    return this.prisma.userAuth.create(args);
  }
  async updateUserAuth(
    args: Prisma.UserAuthUpdateArgs
  ): Promise<PrismaUserAuth> {
    return this.prisma.userAuth.update(args);
  }
  async deleteUserAuth(
    args: Prisma.UserAuthDeleteArgs
  ): Promise<PrismaUserAuth> {
    return this.prisma.userAuth.delete(args);
  }
}
